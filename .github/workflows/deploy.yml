# Build & Deploy Puppet module when a valid versioned tag is pushed
# ==============================================================================
#
# This pipeline uses the following GitHub Action Secrets:
#
#   GitHub Secret variable    Type      Notes
#   ------------------------  --------  ----------------------------------------
#   NO_SCOPE_GITHUB_TOKEN     Required  GitHub token (should have no scopes)
#   GITLAB_SERVER_URL         Optional  Specify a GL server other than gitlab.com
#   The secure vars will be filtered in GitHub Actions log output, and aren't
#   provided to untrusted builds (i.e, triggered by PR from another repository)
#
# ------------------------------------------------------------------------------
#
# NOTES:
#   It is necessary to provide NO_SCOPE_GITHUB_TOKEN because $secrets.GITHUB_AUTO
#   is NOT provide to manually-triggered (`workflow_dispatch`) events, in order
#   to prevent recursive triggers between workflows
#
#   Reference:
#
#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
---
name: 'Tag: Release to GitHub & Puppet Forge'

on:
  push:
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'

env:
  # Workaround: secrets cannot be used in conditionals
  #
  #   https://github.com/actions/runner/issues/520)
  #
  PUBLISH_TO_FORGE: ${{ secrets.PUBLISH_TO_FORGE }}  # non-sensitive "secret"
jobs:
  releng-checks:
    name: "RELENG checks"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch}}
          clean: true
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: bundle exec rake pkg:check_version
      - run: bundle exec rake pkg:compare_latest_tag
      - run: bundle exec rake pkg:create_tag_changelog

  build:
    needs: [ releng-checks ]
    runs-on: ubuntu-18.04
    env:
      PUPPETFORGE_API_TOKEN: ${{ secrets.PUPPETFORGE_API_TOKEN }}
    steps:
      - name: Check tag ref
        id: tag-check
        run: |
          tag=${GITHUB_REF/refs\/tags\//}
          ### [[ "$GITHUB_REF" =~ ^refs/tags/ ]] || { echo "::error ::GITHUB_REF is nott a tag: ${GITHUB_REF}"; exit 1 ; }
          echo "::set-output name=VERSION::${tag}"
          echo "::set-failed ::error message"
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.tag-check.outputs.tag }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: bundle exec rake metadata_lint
      - name: "Build Puppet module"
        run: "bundle exec pdk build --force"
      - run: 'echo "== LATEST TAG:  ${{ steps.tag-check.outputs.tag }}"'
      - run: 'jq . metadata.json'
      - run: 'echo -- curl -sS --fail -A "$FORGE_USER_AGENT" -H "Authorization: Bearer ${PUPPETFORGE_API_TOKEN}" -X POST -F "file=@$(find $PWD/pkg -name ''*.tar.gz'')" https://forgeapi.puppet.com/v3/releases'
#    - name: Build and publish module
#      uses: barnumbirr/action-forge-publish@v2.3.0
#      env:
#       FORGE_API_KEY: ${{ secrets.FORGE_API_KEY }}
#       REPOSITORY_URL: https://forgeapi.puppet.com/v3/releases
#

  examine-contexts:
    name: 'Examine Context contents'
    runs-on: ubuntu-18.04
    steps:
      - name: Dump contexts
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Dump env context
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
        run: echo "$ENV_CONTEXT"
      - name: Dump env vars
        run: env | sort
