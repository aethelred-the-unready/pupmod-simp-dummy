
# NOTES:
#   $secrets.GITHUB_AUTO is not set for workflow_dispatch events
#
#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
---
name: 'Manual: Trigger GLCI for PR'
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to test"
        required: true
        default: '54'
env:
  SIMP_AUTO_GITHUB_TOKEN__NO_SCOPE: ${{ secrets.SIMP_AUTO_GITHUB_TOKEN__NO_SCOPE }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  glci-syntax:
    name: '.gitlab-ci.yml Syntax'
    runs-on: ubuntu-16.04
    env:
      PR_NUMBER: ${{ github.event.inputs.pr_number }}
    outputs:
      exists: ${{ steps.glci-file-exists.outputs.exists }}
      valid: ${{ steps.validate-glci-file.outputs.valid }}
      pr_head: ${{ steps.get-pr.pr_head }}
      pr_ref: ${{ steps.get-pr.pr_ref }}
    steps:
      - uses: actions/github-script@v3
        id: get-pr
        with:
          github-token: ${{secrets.SIMP_AUTO_GITHUB_TOKEN__NO_SCOPE}}
          # See:
          #   - https://octokit.github.io/rest.js/
          script: |
            console.log('== start')
            console.log(`== pr number: ${context.payload.inputs.pr_number}`)
            const pr = await github.request('get /repos/{owner}/{repo}/pulls/{pull_number}', {
              headers: {
                accept: 'application/vnd.github.v3+json'
              },
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.inputs.pr_number
            })
            console.log("== pr")
            console.log(pr)
            console.log("== pr.head")
            console.log(pr.head)

            #console.log("pr.head.repo: \n" + pr.head.repo)
            # PR must have been returned
            if ( !(pr.status == 200) ){
              console.log(`::error ::Error looking up PR#${context.payload.inputs.pr_number}: HTTP Response ${pr.status}`)
              return(false)
            }

            # PR cannot be merged or closed
            if ( pr.data.merged ) {
              console.log(`::error ::PR#${context.payload.inputs.pr_number} is already merged!`)
            }

            core.setOutput( 'head_sha', pr.head.sha )
            core.setOutput( 'head_ref', pr.head.ref )
            core.setOutput( 'head_label', pr.head.label )
###            console.log(`== payload user '${context.payload.sender.login}' CI trigger permission for '${context.repo.owner}': ${write_access_desc(has_write_access(project_permission.data.permission))}`)
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ steps.get-pr.outputs.head_ref }}
      - name: 'Does GLCI file exist?'
        id: glci-file-exists
        run: |
          if [ -f .gitlab-ci.yml ]; then
            echo '.gitlab-ci.yml exists'
            echo '::set-output name=exists::true'
          else
            echo '::error ::The ".gitlab-ci.yml" file is missing!'
            echo '::set-output name=exists::false'
            false
          fi
      - name: 'Validate GLCI file syntax'
        id: validate-glci-file
        if: steps.glci-file-exists.outputs.exists == 'true'
        env:
          GITLAB_API_URL: ${{ secrets.GITLAB_API_URL }}       # https://gitlab.com/api/v4
          GITLAB_API_PRIVATE_TOKEN: ${{ secrets.GITLAB_API_PRIVATE_TOKEN }}
        run: |
          GITLAB_API_URL="${GITLAB_API_URL:-https://gitlab.com/api/v4}"
          CURL_CMD=(curl --http1.1 --fail --silent --show-error --header 'Content-Type: application/json' --data @-)
          [ -n "$GITLAB_API_PRIVATE_TOKEN" ] && CURL_CMD+=(--header "Authorization: Bearer $GITLAB_API_PRIVATE_TOKEN")
          data="$(jq --null-input --arg yaml "$(<.gitlab-ci.yml)" '.content=$yaml' )"
          response="$(echo "$data" | "${CURL_CMD[@]}" "${GITLAB_API_URL}/ci/lint?include_merged_yaml=true" | jq . )"
          status=$( echo "$response" | jq .status )
          if [[ "$status" == '"valid"' ]]; then
            echo '.gitlab-ci.yml is valid'
            echo '::set-output name=valid::true'
          else
            echo '::set-output name=valid::false'
            echo '::error::The .gitlab-ci.yml" file is invalid!'
            echo "$response" | jq -r '.errors[] | . = "::error ::\(.)"'
            printf  "::debug ::.gitlab-ci.yml CI lint service response: %s\n" "$response"
            false
          fi

  dump_contexts:
    name: 'Examine Context contents'
    if: always()
    runs-on: ubuntu-16.04
    steps:
      - name: Dump contexts
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump 'needs' context
        env:
          ENV_CONTEXT: ${{ toJson(needs) }}
        run: echo "$ENV_CONTEXT"
      - name: Dump env vars
        run: env | sort

