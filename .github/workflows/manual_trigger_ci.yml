
# NOTES:
#   $secrets.GITHUB_AUTO is not set for workflow_dispatch events
#
#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
---
name: 'Manual: Trigger GLCI for PR'

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to test"
        required: true
        default: '54'

jobs:
  glci-syntax:
    name: '.gitlab-ci.yml Syntax'
    runs-on: ubuntu-16.04
    outputs:
      exists: ${{ steps.glci-file-exists.outputs.exists }}
      valid: ${{ steps.validate-glci-file.outputs.valid }}
      pr_head_clone_url: ${{ steps.get-pr.pr_head_clone_url }}
      pr_head_ref: ${{ steps.get-pr.pr_head_ref }}
      pr_head_sha: ${{ steps.get-pr.pr_head_sha }}
      pr_head_label: ${{ steps.get-pr.pr_head_sha }}
      pr_head_full_name: ${{ steps.get-pr.pr_head_sha }}
    steps:
      - uses: actions/github-script@v3
        id: get-pr
        with:
          github-token: ${{secrets.SIMP_AUTO_GITHUB_TOKEN__NO_SCOPE}}
          # See:
          #   - https://octokit.github.io/rest.js/
          script: |
            console.log(`== pr number: ${context.payload.inputs.pr_number}`)
            const pr = await github.request('get /repos/{owner}/{repo}/pulls/{pull_number}', {
              headers: {
                accept: 'application/vnd.github.v3+json'
              },
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.inputs.pr_number
            });

            console.log("\n\n== pr\n");
            console.log(pr);
            console.log("\n\n== pr.data.head\n");
            console.log(pr.data.head);
            console.log(pr.status);

            // PR must have been returned
            if ( pr.status != 200 ) {
              //#console.log(`::error ::Error looking up PR \#${context.payload.inputs.pr_number}: HTTP Response ${pr.status}`)
              return(false)
            }

            // TODO: should either of these conditions really prevent a GLCI trigger?
            if ( pr.data.state != 'open' ) {
              console.log(`::error ::PR# ${context.payload.inputs.pr_number} is not open`)
            }
            if ( pr.data.merged ) {
              console.log(`::error ::PR# ${context.payload.inputs.pr_number} is already merged`)
            }
            core.setOutput( 'pr_head_sha', pr.data.head.sha )
            core.setOutput( 'pr_head_ref', pr.data.head.ref )
            core.setOutput( 'pr_head_label', pr.data.head.label )
            core.setOutput( 'pr_head_full_name', pr.data.head.full_name )
            core.setOutput( 'pr_head_clone_url', pr.data.head.repo.clone_url )

######            console.log(`== payload user '${context.payload.sender.login}' CI trigger permission for '${context.repo.owner}': ${write_access_desc(has_write_access(project_permission.data.permission))}`)
      - uses: actions/checkout@v2
        with:
          repository: ${{ steps.get-pr.outputs.pr_head_full_name }}
          ref: ${{ steps.get-pr.outputs.pr_head_ref }}
      - name: 'Does GLCI file exist?'
        id: glci-file-exists
        run: |
          if [ -f .gitlab-ci.yml ]; then
            echo '.gitlab-ci.yml exists'
            echo '::set-output name=exists::true'
          else
            echo '::error ::The ".gitlab-ci.yml" file is missing!'
            echo '::set-output name=exists::false'
            false
          fi
      - name: 'Validate GLCI file syntax'
        id: validate-glci-file
        if: steps.glci-file-exists.outputs.exists == 'true'
        env:
          GITLAB_API_URL: ${{ secrets.GITLAB_API_URL }}       # https://gitlab.com/api/v4
          GITLAB_API_PRIVATE_TOKEN: ${{ secrets.GITLAB_API_PRIVATE_TOKEN }}
        run: |
          GITLAB_API_URL="${GITLAB_API_URL:-https://gitlab.com/api/v4}"
          CURL_CMD=(curl --http1.1 --fail --silent --show-error --header 'Content-Type: application/json' --data @-)
          [ -n "$GITLAB_API_PRIVATE_TOKEN" ] && CURL_CMD+=(--header "Authorization: Bearer $GITLAB_API_PRIVATE_TOKEN")
          data="$(jq --null-input --arg yaml "$(<.gitlab-ci.yml)" '.content=$yaml' )"
          response="$(echo "$data" | "${CURL_CMD[@]}" "${GITLAB_API_URL}/ci/lint?include_merged_yaml=true" | jq . )"
          status=$( echo "$response" | jq .status )
          if [[ "$status" == '"valid"' ]]; then
            echo '.gitlab-ci.yml is valid'
            echo '::set-output name=valid::true'
          else
            echo '::set-output name=valid::false'
            echo '::error::The .gitlab-ci.yml" file is invalid!'
            echo "$response" | jq -r '.errors[] | . = "::error ::\(.)"'
            printf  "::debug ::.gitlab-ci.yml CI lint service response: %s\n" "$response"
            false
          fi

  dump_contexts:
    name: 'Examine Context contents'
    if: always()
    runs-on: ubuntu-16.04
    steps:
      - name: Dump contexts
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump 'needs' context
        env:
          ENV_CONTEXT: ${{ toJson(needs) }}
        run: echo "$ENV_CONTEXT"
      - name: Dump env vars
        run: env | sort

